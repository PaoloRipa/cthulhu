#!/bin/bash
#
######################################################
# Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn #
######################################################
#
#######################################################################
# Cthulhu is a front-end tool for mtglacier CLI                       # 
# Paolo Ripamonti - paolo.ripamonti@gmail.com - 2017                  #
# Released under GNU GPLv3 - http://www.gnu.org/licenses/             #
# Reference to App:MtAws --> https://github.com/vsespb/mt-aws-glacier #
#######################################################################

# VERSION - DO NOT CHANGE
cthulhuVersion="2.3-DEV"

# Setting defaults
configFile=$HOME/glacier.d/mtAwsGlacier.conf  # AWS Glacier config file
concurrencyValue=10                           # Number of concurrent backup threads
leafOptValue=0                                # Set to 0 when working with CIFS
logActionsToFile=1                            # Set to 1 to record results of actions to action log file
quietMode=1                                   # Set to 1 not to print anything to STDOUT
deleteRemoved=0                               # Set to 1 to instruct sync action to delete removed items
logDir=$HOME/logs                             # Location of the log directory
writeToMainLog=1                              # Write actions and timestamps to the system logger
sendEmails=0                                  # Set to 1 to trigger email notifications
emailTo=root                                  # Should be overridden in the config file
checkOnSyncEnd=0                              # Set to 1 to force an exit check upon completion of sync action
maxRestoreFiles=1000                          # Set the max number of files to be restored by a restore-prepare action
restoreDelay=5                                # How many hours after a restore-prepare action, files will be ready to download
compressLogFiles=1                            # Compress log files at the end of sync, sync-thash and sync-mtime actions
persistCheckStatusLogFile=0                   # Persist the log file generated by check-status action and compress it
logRetentionDays=1                            # Retention time, in days, of log files managed by manage-log action
persistLogRetentionDays=7                     # Retention time, in days, of persisted log files managed by manage-log action

# CLI triggered options
shortListVault=0

# Location of cthulhu lock file
myLockFile=/var/lock/cthulhu.lock

# Ensuring mtglacier is in the PATH
myPathDir=$(which mtglacier | sed -e "s/mtglacier//")
PATH=$PATH:$myPathDir

# Sourcing the cthulhu configuration file, to override defaults
myConfigFile="$HOME/.cthulhu"
[ -f $myConfigFile ] && source $myConfigFile

# Initializing run variables
myUuid=$(cat /proc/sys/kernel/random/uuid)
skipMainInstall=0
sendEmailOnCompletion=0

# Helper Functions
function doHelp() {
	forceInteractiveMode
	printMsg "cthulhu version $cthulhuVersion"
	printMsg "This software is released under GNU GPLv3: http://www.gnu.org/licenses/"
	printMsg "Usage: cthulhu -ahiv [action] [vault] [journal]"
	printMsg "Flags:"
	printMsg "  -a               Install only the BaSH autocompletion when executing install action."
	printMsg "  -h               Show online help."
	printMsg "  -i               Force interactive mode."
	printMsg "  -m               Send notification email upon completion of sync-mtime or sync-thash action."
	printMsg "  -v               Print chtulhu version and exits."
	printMsg " "
	printMsg " "
	printMsg "Valid actions are:"
	printMsg "  add-schedule         Adds a crontab entry to schedule a sync action on a targe vault"
	printMsg "  check-status         Generates a stats file, describing the status of the backup"
	printMsg "  check-sync           Executes a status check of the last sync action log files"
	printMsg "  create-vault         Creates a new vault"
	printMsg "  del-schedule         Removes scheduled sync actions"
	printMsg "  delete-vault         Deletes the target vault (must have been purged)"
	printMsg "  gen-conf             Generates the default configuration file: $myConfigFile"
	printMsg "  help-action          Displays detailed help page for the target action"
	printMsg "  install              First time installation"
	printMsg "  journal-create       Instructs Glacier to rebuild the journal file"
	printMsg "  journal-download     Retrieves a rebuilt journal. This can be executed after at least $restoreDelay hours from the rebuild start"
	printMsg "  list-codes           Displays exit code reference information"
	printMsg "  list-vaults          Lists the existing vaults"
	printMsg "  manage-log           Execute log management actions"
	printMsg "  purge-lock           Forcefully delete lock file $myLockFile"
	printMsg "  purge-vault          Remove all items from the target vault"
	printMsg "  restore-download     Actually retrieve the data. This can be executed after at least $restoreDelay hours from the preparation"
	printMsg "  restore-prepare      Instructs Glacier vault to prepare data for restoration"
	printMsg "  show-changelog       Displays the changelog for the current version of cthulhu"
	printMsg "  show-conf            Displays the current configuration, from $myConfigFile"
	printMsg "  show-default-config  Displays the default configuration"
	printMsg "  show-schedule        Lists sync actions scheduled via crontab"
	printMsg "  sync                 Executes a sync from the local directory to the vault"
	printMsg "  sync-mtime           Executes a sync action to fix MODIFICATION TIME MISSMATCH events"
	printMsg "  sync-thash           Executes a sync action to fix TREEHASH MISSMATCH events"
	printMsg "  test-mail            Sends out a test email"
	printMsg " "
	printMsg " "
	printMsg "How to configure cthulhu for batch or interactive mode"
	printMsg "------------------------------------------------------"
	printMsg "Set the following variables to always adopt batch usage behavior (e.g. via crontab only)"
	printMsg "  logActionsToFile=1"
	printMsg "  quietMode=1"
	printMsg "  writeToMainLog=1"
	printMsg " "
	printMsg "Set the following variable to always adopt interactive usage (e.g. for shell calls only)"
	printMsg "  logActionsToFile=0"
	printMsg "  quietMode=0"
	printMsg "  writeToMainLog=0"
	printMsg " "
	printMsg " "
	printMsg "Usage tips and tricks"
	printMsg "---------------------"
	printMsg "1. If this is the first time you run cthulhu, then you should execute the install action."
	printMsg "2. Cthulhu configuration file is $myConfigFile and can be generated by the gen-conf action."
	printMsg "3. Cthulhu is a front-end to App::MtAws perl module. In order to use cthulhu, you must install App::MtAws."
	printMsg "4. Further information on App:MtAws can be found at https://github.com/vsespb/mt-aws-glacier"
	printMsg "5. You can contact the maintainer of https://github.com/PaoloRipa/cthulhu for any information."
}

function shortHelp() {
	forceInteractiveMode
	printMsg "add-schedule check-status check-sync create-vault del-schedule delete-vault gen-conf help-action install journal-create journal-download list-codes list-vaults manage-log purge-lock purge-vault restore-download restore-prepare show-changelog show-conf show-default-config show-schedule sync sync-mtime sync-thash test-mail"
}

function doHelpSync() {
	forceInteractiveMode
	printMsg "Usage: cthulhu sync [dir] [vault] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "Description: Syncronises the contents of directory [dir] to  vault [vault], using journal file [journal]."
}

function doHelpSyncMtime() {
	forceInteractiveMode
	printMsg "Usage: cthulhu sync-mtime [dir] [vault] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "  -m               Send notification email upon completion of sync-mtime or sync-thash action."
	printMsg "Description: Forces a sync action on directory [dir] to vault [vault], using journal file [journal], to solve MODIFICATION TIME MISSMATCH events."
}

function doHelpSyncThash() {
	forceInteractiveMode
	printMsg "Usage: cthulhu sync-thash [dir] [vault] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "  -m               Send notification email upon completion of sync-mtime or sync-thash action."
	printMsg "Description: Forces a sync action on directory [dir] to vault [vault], using journal file [journal], to solve TREEHASH MISSMATCH events."
}

function doHelpCheck() {
	forceInteractiveMode
	printMsg "Usage: cthulhu check-status [dir] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [journal] Journal file, with full path"
	printMsg "Description: Excute a check of the contents of directory [dir] against the journal file [journal]."
	printMsg ""
	printMsg "The following status codes are returned by App::MtAws"
	printMsg "  ERRORS - Files that triggered an error when sync'ing to the vault (e.g. permission errors, for example)."
	printMsg "  MISSED - Files skipped by the sync action (e.g. due to filters)."
	printMsg "  MODIFICATION TIME MISSMATCH - Files whose mtime differs from the one in the journal. To correct those, execute cthulhu sync-mtime action."
	printMsg "  OK - Files that have been sync'd successfully to the vault."
	printMsg "  SIZE MISSMATCH - Files whose size differs from the one in the journal."
	printMsg "  TREEHASH MISSMATCH - Files whose info in the threehash differs from the one in the journal. To correct those, execute cthulhu sync-thash action."
	printMsg "  ZERO SIZE - Files that have not been sync'd (by AWS Glacier desing), because their size is 0."
	printMsg ""
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "Note: executing this action might take long, depending on the size of the vault"
}

function doHelpCreate() {
	forceInteractiveMode
	printMsg "Usage: cthulhu create-vault [vault]"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "Description: Creates the vault [vault]."
}

function doHelpPurge() {
	forceInteractiveMode
	printMsg "Usage: cthulhu purge-vault [vault] [journal]"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "Description: Removes all files from vault [vault], using the journal file [journal]."
}

function doHelpDelete() {
	forceInteractiveMode
	printMsg "Usage: cthulhu delete-vault [vault]"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "Description: Deletes the vault [vault]. Note that the vault must have been purged at least 48 hours in advance."
}

function doHelpRestorePrepare() {
	forceInteractiveMode
	printMsg "Usage: cthulhu restore-prepare [dir] [vault] [journal]"
	printMsg "Description: Prepares contents of directory [dir] on vault [vault] for restoration, using journal file [journal]."
}

function doHelpRestoreDownload() {
	forceInteractiveMode
	printMsg "Usage: cthulhu restore-complete [dir] [vault] [journal]"
	printMsg "Description: Downloads missing files into directory [dir] from vault [vault], using journal file [journal]. Note that a restore-prepare action on the same directory must have been executed at least $restoreDelay hours in advance."
}

function doHelpAddSchedule() {
	forceInteractiveMode
	printMsg "Usage: cthulhuVersion add-schedule"
	printMsg "Description: Schedules a check-status, check-sync or sync action via the executing user's crontab."
}

function doHelpCheckSync() {
	forceInteractiveMode
	printMsg "Usage: chtulhu check-sync"
	printMsg "Flags:"
	printMsg "  -i               Force interactive mode."
	printMsg "Description: Checks the exit satus of the last sync action for each vault and send an email if errors are encountered. Execute with -i to obtain the status on STDOUT."
}

function doHelpDelSchedule() {
	forceInteractiveMode
	printMsg "Usage: chtulhu del-schedule"
	printMsg "Description: Opens an interactive menu to remove scheduled actions from the executing user's crontab."
}

function doHelpGenConf() {
	forceInteractiveMode
	printMsg "Usage: chtulhu gen-conf"
	printMsg "Description: Generates cthulhu default configuration file $myConfigFile."
}

function doHelpInstall() {
	forceInteractiveMode
	printMsg "Usage: chtulhu install"
	printMsg "Flags:"
	printMsg "  -a               Install only the BaSH autocompletion when executing install action."
	printMsg "Description: Prepares cthulhu for the first execution. This will require you to provide key, secret and region from your AWS account."
}

function doHelpListCodes() {
	forceInteractiveMode
	printMsg "Usage: chtulhu list-codes"
	printMsg "Description: Displays a short description of all exit codes returned by cthulhu."
}

function doHelpShowConf() {
	forceInteractiveMode
	printMsg "Usage: chtulhu show-conf"
	printMsg "Description: Shows the current configuration file $myConfigFile."
}

function doHelpShowDefaultConf() {
	forceInteractiveMode
	printMsg "Usage: cthulhu show-default-config"
	printMsg "Description: Shows the default configuration."
}

function doHelpShowSchedule() {
	forceInteractiveMode
	printMsg "Usage: chtulhu show-schedule"
	printMsg "Description: Shows the list of actions scheduled via the executing user's crontab."
}

function doHelpTestEmail() {
	forceInteractiveMode
	printMsg "Usage: chtulhu test-mail"
	printMsg "Description: Sends a test email based on the configurations in $myConfigFile."
}

function doHelpListVault() {
	forceInteractiveMode
	printMsg "Usage: cthulhu list-vaults"
	printMsg "Flags:"
	printMsg "-s				Compact output mode"
	printMsg "Description: Shows a list of vaults in the AWS Glacier account."
}

function doHelpJournalCreate() {
	forceInteractiveMode
	printMsg "Usage cthulhu journal-create [vault]"
	printMsg "Description: Instructs AWS Glacier backend to rebuild the journal file for vault [vault]."
}

function doHelpJournalDownload() {
	forceInteractiveMode
	printMsg "Usage: cthulhu journal-download [vault] [journal]"
	printMsg "Description: Retrieve the journal file from vault [vault] and saves it into file [journal]. Note that a journal-create action on the same vault must have been executed at least $restoreDelay hours in advance."
}

function doHelpShowChangelog() {
	forceInteractiveMode
	printMsg "Usage: cthulhu show-changelog"
	printMsg "Description: Displays the changelog for current cthulhu version."
}

function doHelpManageLog() {
	forceInteractiveMode
	printMsg "Usage: cthulhu manage-log"
	printMsg "Description: Executes log management actions."
}

function doHelpPurgeLock() {
	forceInteractiveMode
	printMsg "Usage: cthulhu purge-lock"
	printMsg "Description: Forcefully deletes the lock file $myLockFile"
}

function doHelpAction() {
	forceInteractiveMode
	case $1 in
		add-schedule ) doHelpAddSchedule ;;
		check-status ) doHelpCheck ;;
		check-sync ) doHelpCheckSync ;;
		create-vault ) doHelpCreate ;;
		del-schedule ) doHelpDelSchedule ;;
		delete-vault ) doHelpDelete ;;
		gen-conf ) doHelpGenConf ;;
		install ) doHelpInstall ;;
		journal-create ) doHelpJournalCreate ;;
		journal-download ) doHelpJournalDownload ;;
		list-codes ) doHelpListCodes ;;
		list-vaults ) doHelpListVault ;;
		manage-log ) doHelpManageLog ;;
		purge-lock ) doHelpPurgeLock ;;
		purge-vault ) doHelpPurge ;;
		restore-download ) doHelpRestoreDownload ;;	
		restore-prepare ) doHelpRestorePrepare ;;
		show-changelog ) doHelpShowChangelog ;;
		show-conf ) doHelpShowConf ;;
		show-default-config ) doHelpShowDefaultConf ;;
		show-schedule ) doHelpShowSchedule ;;
		sync ) doHelpSync ;;
		sync-mtime ) doHelpSyncMtime ;;
		sync-thash ) doHelpSyncThash ;;
		test-mail ) doHelpTestEmail ;;
		* ) printMsg "Usage: cthulhu help-action [action]" && printMsg "Description: Displays help page for the target [action]" && printMsg "Valid actions: " && shortHelp ;;
	esac
}

function forceInteractiveMode() {
	quietMode=0
	writeToMainLog=0
	useSystemLog=0
	sendEmails=0
}

function printMsg() {
	timestamp=`date`
	# Do I need to write to STDOUT?
	[ $quietMode == 0 ] && echo "$1"
	
	# Do I need to write to a log?
	if [[ $writeToMainLog == 1 ]]; then
		logger -p user.notice -t cthulhu $myUuid - $1
	fi
}

function parseCheckLocalHash() {
	grepString="^TOTALS|^[0-9]"
	echo "Backup stats for directory: $3" > $2
	cat $1 | egrep "$grepString" | grep -v ^$ >> $2 
}

# Function used to check if the target directory exists
# Since 1.6, this can be called with 2 params
#   1. Target directory to be checked
#   2. Action that called the function, for reporting purposes
function checkDirectory() {
	if [[ ! -d $1 ]]; then
		if [[ $2 ]]; then
			printMsg "ERROR: Target directory $1 does not exist. Aborting action $2."
		else
			printMsg "ERROR: Target directory $1 does not exist. Aborting action."
		fi
		if [[ $sendEmails == 1 ]]; then
			if [[ $2 ]]; then
				doSendEmail "ERROR: Non existing directory" "ERROR: Target directory $1 does not exist on host $(hostname).\nAborting action $2.\n"
			else
				doSendEmail "ERROR: Non existing directory" "Target directory $1 does not exist on host $(hostname).\nAborting action.\n"
			fi
		fi
		exit 7
	fi
}

# Function used to send emails to recipients
# Note that this function requires special chars, as it's using 
# echo with interpretation of backslash escapes enabled.
function doSendEmail() {
	emailSignature="\nYours faithfully\n-- \nChthulu@$(hostname)"
	# Requires two args: subject and body
	echo -e "$2 $emailSignature" | mail -s "[cthulhu] - $1" $emailTo
}

# Function to create a new config file, with default values
function writeConfigFile() {
	rm -rf $myConfigFile
	echo "######################################" >> $myConfigFile
	echo "# cthulhu default configuration file #" >> $myConfigFile
	echo "######################################" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# How to configure cthulhu for batch or interactive mode" >> $myConfigFile
	echo "# ------------------------------------------------------" >> $myConfigFile
	echo "# Set the following variables to always adopt batch usage behavior (e.g. via crontab only)" >> $myConfigFile
	echo "#   logActionsToFile=1" >> $myConfigFile
	echo "#   quietMode=1" >> $myConfigFile
	echo "#   writeToMainLog=1" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# Set the following variable to always adopt interactive usage (e.g. for shell calls only)" >> $myConfigFile
	echo "#   logActionsToFile=0" >> $myConfigFile
	echo "#   quietMode=0" >> $myConfigFile
	echo "#   writeToMainLog=0" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# Location of AWS Glacier configuration file" >> $myConfigFile
	echo "# configFile=/home/oper/glacier.d/mtAwsGlacier.conf" >> $myConfigFile
	echo "# Number of concurrent backup threads" >> $myConfigFile
	echo "# concurrencyValue=10" >> $myConfigFile
	echo "# Set to 0 when working with CIFS" >> $myConfigFile
	echo "# leafOptValue=0" >> $myConfigFile
	echo "# Set to 1 to record results of actions to the action log file"  >> $myConfigFile
	echo "# logActionsToFile=1" >> $myConfigFile
	echo "# Set to 1 not to print anything to STDOUT"  >> $myConfigFile
	echo "# quietMode=1" >> $myConfigFile
	echo "# Set to 1 to instruct sync action to delete removed items"  >> $myConfigFile
	echo "# deleteRemoved=0" >> $myConfigFile
	echo "# Location of the log directory" >> $myConfigFile
	echo "# logDir=$HOME/logs" >> $myConfigFile
	echo "# Set to 1 to write actions and timestamps to the system logger" >> $myConfigFile
	echo "# writeToMainLog=1" >> $myConfigFile
	echo "# Set to 1 to trigger email notifications" >> $myConfigFile
	echo "# sendEmails=0" >> $myConfigFile
	echo "# Email address that should get the notifications" >> $myConfigFile
	echo "# emailTo=root" >> $myConfigFile
	echo "# Set to 1 to force an exit check upon completion of sync action" >> $myConfigFile
	echo "# checkOnSyncEnd=0" >> $myConfigFile
	myPathDir=$(which mtglacier | sed -e "s/mtglacier//")
	echo "# Ensuring mtglacier is in the path when running via cron" >> $myConfigFile
	echo "# PATH=\$PATH:$myPathDir" >> $myConfigFile
	echo "# Set the max number of files to be restored by a restore-prepare action" >> $myConfigFile
	echo "# maxRestoreFiles=1000" >> $myConfigFile
	echo "# How many hours after a restore-prepare action, files will be ready to download" >> $myConfigFile
	echo "# It is recommended not to change this value, as it's defined based on AWS Glacier standards" >> $myConfigFile
	echo "# restoreDelay=5" >> $myConfigFile
	echo "# Set to 0 to disable log file compression at the end of each action." >> $myConfigFile
	echo "# compressLogFiles=0" >> $myConfigFile
	echo "# Set to 1 to persist the log file generated by check-status action and compress it" >> $myConfigFile
	echo "# persistCheckStatusLogFile=0" >> $myConfigFile
	echo "# Retention time, in days, of log files managed by manage-log action" >> $myConfigFile
	echo "# logRetentionDays=1" >> $myConfigFile
	echo "# Retention time, in days, of persisted log files managed by manage-log action" >> $myConfigFile
	echo "# persistLogRetentionDays=7" >> $myConfigFile
}

# Function to check if conflicting actions are being executed
# Must be called with two parameter: action and vault
function lookForConflicts() {
	if [[ -f $myLockFile ]]; then
		if [[ $(ps aux | grep cthulhu | grep -v grep | wc -l) -ge 2 ]]; then
			if [[ $(grep $1 $myLockFile | wc -l) != 0 ]]; then
				if [[ $(grep $2 $myLockFile | wc -l) != 0 ]]; then
					printMsg "ERROR: Running action conflict on vault $runningVault detected while attempting to run $1. Aborting."
					exit 16
				fi
			fi
		fi
	fi
	echo $1 >> $myLockFile
	echo $2 >> $myLockFile
}

########
# MAIN #
########

# Reading CLI flags
while getopts "ahimsv" opt; do
  case $opt in
   a ) skipMainInstall=1 ;;
   h ) doHelp && exit 0 ;;
   i ) forceInteractiveMode ;;
   m ) sendEmailOnCompletion=1 ;;
   s ) shortListVault=1 ;;
   v ) forceInteractiveMode && printMsg "cthulhu version: $cthulhuVersion" && exit 0 ;;
   * ) ;;
  esac
done
shift $((OPTIND - 1))

# If we have no arguments, then print usage
if [[ $# == 0 ]]; then
	doHelp
	exit 1
fi

# Check if the backend is installed
which mtglacier >/dev/null
if [[ $? != 0 ]]; then
	printMsg "ERROR: mtglacier does not seem to be installed on the system. Aborting."
	exit 8
else
	myMtGlacier=$(which mtglacier)
fi

# Check if all directories and files required are available
if [[ ! -f $configFile ]]; then
	printMsg "ERROR: $configFile is missing. Aborting." 
	exit 9
fi
if [[ ! -d $logDir ]]; then 
	printMsg "ERROR: $logDir is missing. Aborting." 
	exit 10
fi

# Check if logmgmt is scheduled, if not schedule it
if [[ $(crontab -l | grep "cthulhu manage-log" | wc -l) == 0 ]]; then
	printMsg "manage-log action not present in crontab. Scheduling it."
	(crontab -l 2>/dev/null; echo -e "# cthulhu log cleanup\n0 15 * * * $(which cthulhu) manage-log > /dev/null") | crontab -
fi

# Sync action, to execute backup fo source dir to target vault
if [[ $1 == 'sync' ]]; then
	# Must be invoked with 4 args: action, directory, vault, journal
	if [[ $# != 4 ]]; then
		doHelpSync
		exit 2
	fi
	printMsg "Starting $1 action on vault $3."
	lookForConflicts $1 $3
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	if [[ $logActionsToFile == 1 ]]; then
		logFile=${logDir}/glacier-$1-$3-`date +%s`.log
		if [[ $deleteRemoved == 1 ]]; then
			$myMtGlacier $1 --delete-removed --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		else
			$myMtGlacier $1 --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		fi
		printMsg "Completed. Action log: $logFile"
	else
		if [[ $deleteRemoved == 1 ]]; then
			$myMtGlacier $1 --delete-removed --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
		else
			$myMtGlacier $1 --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
		fi
	fi

	# We confirm if this was a good run, or log an error
	if [[ $checkOnSyncEnd == 1 ]]; then
		if [ $(tail -1 $logFile | grep "OK DONE" | wc -l) == 0 ]
		then
			printMsg "ERROR: Action $1 on vault $3 did not complete with OK DONE. Check $logFile for details."
			if [[ $sendEmails == 1 ]]; then
				doSendEmail "ERROR: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) did not complete with OK DONE.\nPlease, check $logFile for details.\n"
			fi
		fi
	fi

	if [[ $compressLogFiles == 1 ]]; then
		gzip $logFile
	fi
	rm -rf $myLockFile
	exit 0
fi

# Sync-mtime action, to fix MODIFICATION TIME MISSMATCH events
if [[ $1 == 'sync-mtime' ]]; then
	# Setting run local variables
	errorEmailSent=0
	# Must be invoked with 4 args: action, directory, vault, journal
	if [[ $# != 4 ]]; then
		doHelpSyncMtime
		exit 2
	fi
	printMsg "Starting $1 action on vault $3."
	lookForConflicts $1 $3
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	if [[ $logActionsToFile == 1 ]]; then
		logFile=${logDir}/glacier-syncmtime-$3-`date +%s`.log
		$myMtGlacier sync --replace-modified --detect mtime --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier sync --replace-modified --detect mtime --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
	fi

	# We confirm if this was a good run, or log an error
	if [[ $checkOnSyncEnd == 1 ]]; then
		if [ $(tail -1 $logFile | grep "OK DONE" | wc -l) == 0 ]
		then
			printMsg "ERROR: Action $1 on vault $3 did not complete with OK DONE. Check $logFile for details."
			if [[ $sendEmails == 1 ]]; then
				doSendEmail "ERROR: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) did not complete with OK DONE.\nPlease, check $logFile for details.\n"
				errorEmailSent=1
			fi
		fi
	fi
	# If needed, we send a completion notification email
	if [[ $sendEmailOnCompletion == 1 ]]; then
		if [[ $errorEmailSent == 0 ]]; then
			doSendEmail "NOTICE: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) has been completed on $(date).\n"
		fi
	fi
	if [[ $compressLogFiles == 1 ]]; then
		gzip $logFile
	fi
	rm -rf $myLockFile
	exit 0
fi

# Sync-thash action, to fix MODIFICATION TIME MISSMATCH events
if [[ $1 == 'sync-thash' ]]; then
	# Setting run local variables
	errorEmailSent=0
	# Must be invoked with 4 args: action, directory, vault, journal
	if [[ $# != 4 ]]; then
		doHelpSyncThash
		exit 2
	fi
	printMsg "Starting $1 action on vault $3."
	lookForConflicts $1 $3
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	if [[ $logActionsToFile == 1 ]]; then
		logFile=${logDir}/glacier-syncthash-$3-`date +%s`.log
		$myMtGlacier sync --replace-modified --detect treehash --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier sync --replace-modified --detect treehash --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
	fi

	# We confirm if this was a good run, or log an error
	if [[ $checkOnSyncEnd == 1 ]]; then
		if [ $(tail -1 $logFile | grep "OK DONE" | wc -l) == 0 ]
		then
			printMsg "ERROR: Action $1 on vault $3 did not complete with OK DONE. Check $logFile for details."
			if [[ $sendEmails == 1 ]]; then
				doSendEmail "ERROR: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) did not complete with OK DONE.\nPlease, check $logFile for details.\n"
				errorEmailSent=1
			fi
		fi
	fi
	# If needed, we send a completion notification email
	if [[ $sendEmailOnCompletion == 1 ]]; then
		if [[ $errorEmailSent == 0 ]]; then
			doSendEmail "NOTICE: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) has been completed on $(date).\n"
		fi
	fi
	if [[ $compressLogFiles == 1 ]]; then
		gzip $logFile
	fi
	rm -rf $myLockFile
	exit 0
fi

# List action, to retrieve a list of available vaults.
if [[ $1 == 'list-vaults' ]]; then
	# This cannot be run in batch mode, so we always print only to STDOUT
	forceInteractiveMode
	if [[ $shortListVault == 1 ]]; then
		$myMtGlacier $1 --config $configFile --format for-humans | grep Vault | cut -d " " -f 1,2
		exit 0
	fi
	$myMtGlacier $1 --config $configFile --format for-humans
	exit 0
fi

# Create action to provision a new vault
if [[ $1 == 'create-vault' ]]; then
	# This cannot be run in batch mode, so we always print only to STDOUT
	forceInteractiveMode
	# Must be run with 2 args: action, vault
	if [[ $# != 2 ]]; then
		doHelpCreate
		exit 4
	fi
	$myMtGlacier $1 $2 --config $configFile
	exit 0
fi

# Check status action, to generate a stats file showing the overall status of an archive
if [[ $1 == 'check-status' ]]; then
	# Must be run with 3 args: action, directory, journal
	if [[ $# != 3 ]]; then
		doHelpCheck
		exit 5
	fi
	printMsg "Starting $1 action on directory $2."
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	logFile=${logDir}/glacier-$1-`date +%s`.log
	$myMtGlacier check-local-hash --config $configFile --dir $2 --journal $3 >$logFile 2>&1
	# Here we need to ensure we had a clean run
	if [[ $(egrep "$TOTALS" $logFile) == 0 ]]; then
		if [[ $sendEmails == 1 ]]; then
			checkEmailBody="ERROR: Action $1 on directory $2 did not complete successfully.\nPlease troubleshoot.\n"
		else
			printMsg "ERROR: Action $1 on directory $2 did not complete successfully."
			if [[ $persistCheckStatusLogFile == 1 ]]; then
				printMsg "Detailed informations available in $logFile.persist.gz"
			fi
		fi
		exit 17
	fi
	resultFile=${logDir}/glacier-stats-`date +%s`.log
	parseCheckLocalHash $logFile $resultFile $2
	printMsg "Action completed. Stats logged to $resultFile"
	if [[ $persistCheckStatusLogFile == 1 ]]; then
		printMsg "Detailed informations available in $logFile.persist.gz"
	fi
	if [[ $sendEmails == 1 ]]; then
		checkEmailBody="Results of $1 action on directory $2:\n$(cat $resultFile)\n"
		if [[ $(grep MODIFICATION $resultFile | cut -d " " -f 1) != 0 ]]; then
			checkEmailBody="$checkEmailBody\nAs MODIFICATION TIME MISSMATCH counter is not 0, we recommend excuting sync-mtime action on this directory.\n"
		fi
		if [[ $(grep TREEHASH $resultFile | cut -d  " " -f 1) != 0 ]]; then
			checkEmailBody="$checkEmailBody\nAs TREEHASH MISSMATCH counter is not 0, we recommend executing sync-thash action on this directory.\n"
		fi
		doSendEmail "Results of $1 action on directory $2" "$checkEmailBody"
	fi
	if [[ $persistCheckStatusLogFile == 1 ]]; then
		mv $logFile $logFile.persist
		gzip $logFile.persist
	else
		rm -rf $logFile
	fi
	exit 0
fi

if [[ $1 == 'purge-vault' ]]; then
	# Must be run with 3 args: action, vault, journal
	if [[ $# != 3 ]]; then
		doHelpPurge
		exit 6
	fi
	if [[ $logActionsToFile == 1 ]]; then
		logFile=${logDir}/glacier-$1-`date +%s`.log
		printMsg "Starting $1 action on vault $2."
		lookForConflicts $1 $2
		$myMtGlacier $1 --vault $2 --config $configFile --journal $3 >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier $1 --vault $2 --config $configFile --journal $3
	fi
	if [[ $compressLogFiles == 1 ]]; then
		gzip $logFile
	fi
	rm -rf $myLockFile
	exit 0
fi

if [[ $1 == 'delete-vault' ]]; then
	# Must be run with 2 args: action, vault
	if [[ $# != 2 ]]; then
		doHelpDelete
		exit 7
	fi
	if [[ $logActionsToFile == 1 ]]; then
		logFile=${logDir}/glacier-$1-`date +%s`.log
		printMsg "Starting $1 action on vault $2."
		$myMtGlacier $1 $2 --config $configFile >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier $1 $2 --config $configFile 
	fi
	if [[ $compressLogFiles == 1 ]]; then
		gzip $logFile
	fi
	exit 0
fi

# Check exit status of last sync action on each vault
if [[ $1 == 'check-sync' ]]; then
	cd $logDir
	for i in `ls glacier-sync-* | egrep -v "\-mtime\-" | egrep -v "\-thash\-" | cut -d "-" -f 3 | sort -d | uniq`; do 
		targetLogFile=$(ls -c1 -rt glacier-sync-$i-* | tail -1)
		if [[ $(file $targetLogFile | grep gzip | wc -l) == 1 ]]; then
			actionStatus=$(zcat $targetLogFile | tail -1 | grep -v "^OK DONE$" | wc -l)
		else
			actionStatus=$(tail -1 $targetLogFile | grep -v "^OK DONE$" | wc -l)
		fi
		if [[ $actionStatus != 0 ]]; then
			if [[ $sendEmails == 1 ]]; then
				doSendEmail "WARNING: Failure in sync log for vault $i" "Last line of last sync file for vault $i is not OK DONE.\nVerify the file contents.\n"
			fi
			printMsg "Last line of last sync file for vault $i is not OK DONE. Verify the file contents: $targetLogFile"
		else
			lastSuccessfulSyncStartTime=$(date -d @$(echo $targetLogFile | cut -d "-" -f 4 | cut -d "." -f 1))
			printMsg "Check-sync action completed on vault $i. Last successful sync started on: $lastSuccessfulSyncStartTime"
		fi
	done
	exit 0
fi

# Generate configuration file action
if [[ $1 == 'gen-conf' ]]; then
	forceInteractiveMode
	printMsg "Generating default configuration file: $myConfigFile"
	writeConfigFile
	exit 0
fi

# First time run
if [[ $1 == 'install' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	if [[ $skipMainInstall == 0 ]]; then
		printMsg "Executing first time run setup."
		mkdir $logDir
		writeConfigFile
		mkdir $HOME/glacier.d
		echo "Building the AWS Glacier configuration file"
		echo "Please provide the following details:"
		echo "- Key: "
		read installKey
		echo "- Secret: "
		read installSecret
		echo "- Region: "
		read installRegion
		echo "Generating AWS Glacier file"
		echo "key=$installKey" > $configFile
		echo "secret=$installSecret" >> $configFile
		echo "region=$installRegion" >> $configFile
		echo "protocol=http" >> $configFile
		echo "Installing log management cron job"
		(crontab -l 2>/dev/null; echo -e "# AWS Glacier logs cleanup\n0 15 * * * find $logDir -name \"glacier-*.log\" -ctime +1 -type f  -exec rm -rf {} \\;") | crontab -
		(crontab -l 2>/dev/null; echo -e "# AWS Glacier logs cleanup\n0 15 * * * find $logDir -name \"glacier-*.log.gz\" -ctime +1 -type f  -exec rm -rf {} \\;") | crontab -
	fi
	printMsg "Creating BaSH autocompletion file"
	cthulhuAutocompletionFile=$HOME/.cthulhu.autocomplete.sh
	rm -rf $cthulhuAutocompletionFile >/dev/null 2>&1
	echo "_cthulhu()" >> $cthulhuAutocompletionFile
	echo "{" >> $cthulhuAutocompletionFile
	echo "  local cur acts" >> $cthulhuAutocompletionFile
	echo "  COMPREPLY=()" >> $cthulhuAutocompletionFile
	echo "  cur=\"\${COMP_WORDS[COMP_CWORD]}\"" >> $cthulhuAutocompletionFile
  	echo "  prev=\"\${COMP_WORDS[COMP_CWORD-1]}\"" >> $cthulhuAutocompletionFile
	echo "  acts=\"\$(cthulhu short-help)\"" >> $cthulhuAutocompletionFile
	echo "  if [[ \${prev} == 'help-action' ]]; then" >> $cthulhuAutocompletionFile
	echo "     COMPREPLY=( \$(compgen -W \"\${acts}\" -- \${cur}) )" >> $cthulhuAutocompletionFile
	echo "     return 0" >> $cthulhuAutocompletionFile
	echo "  fi" >> $cthulhuAutocompletionFile
	echo "  if [[ \$(echo \${prev} | grep \"-\" | wc -l) != 0 ]]; then" >> $cthulhuAutocompletionFile
	echo "     COMPREPLY=( \$(compgen -W \"\${acts}\" -- \${cur}) )" >> $cthulhuAutocompletionFile
	echo "     return 0" >> $cthulhuAutocompletionFile
	echo "  fi" >> $cthulhuAutocompletionFile
	echo "  if [[ \${prev} != 'cthulhu' ]]; then " >> $cthulhuAutocompletionFile
    echo "    COMPREPLY=( \$(compgen -f \${cur} ) )" >> $cthulhuAutocompletionFile
    echo "    return 0" >> $cthulhuAutocompletionFile
  	echo "  fi" >> $cthulhuAutocompletionFile
	echo "  COMPREPLY=( \$(compgen -W \"\${acts}\" -- \${cur}) )" >> $cthulhuAutocompletionFile
	echo "  return 0" >> $cthulhuAutocompletionFile
	echo "}" >> $cthulhuAutocompletionFile
	echo "complete -F _cthulhu cthulhu" >> $cthulhuAutocompletionFile
	printMsg "Adding autocompletion to .bashrc"
	echo "" >> $HOME/.bashrc
	if [[ $(grep "source $cthulhuAutocompletionFile" $HOME/.bashrc | wc -l) == 0 ]]; then
		echo "# Added by cthulhu on $(date)" >> $HOME/.bashrc
		echo "source $cthulhuAutocompletionFile" >> $HOME/.bashrc
	fi
	source $cthulhuAutocompletionFile
	if [[ $skipMainInstall == 0 ]]; then
		printMsg "Done, cthulhu is ready to be used."
	else
		printMsg "Done, autocompletion installed."
	fi
	exit 0
fi

# Test email 
if [[ $1 == 'test-mail' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "Generating test email."
	doSendEmail "INFO: Test email from cthulhu" "This is a test message from cthulhu running on $(hostname).\nPlease do not respond.\n"
	exit 0
fi

# Upgrade configuration file
if [[ $1 == 'upgrade-conf' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "Deprecated: this action does not exist anymore."
	exit 0
fi

# Schedule actions via crond
if [[ $1 == 'schedule-sync' || $1 == 'add-schedule' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "It is recommended to leave a gap between consecutive scheduled actions, to avoid overlaps which can result in system and network overload."
	printMsg "Use cthulhu show-schedule to list the currently scheduled actions."
	printMsg "Enter to continue or Ctrl+c to abort"
	read
	printMsg "What type of action you want to schedule?"
	printMsg " 1. check-status"
	printMsg " 2. check-sync"
	printMsg " 3. sync"
	printMsg "Select one option."
	read actionToSchedule
	if [[ $actionToSchedule == 1 ]]; then
		printMsg "Gathering data to schedule your sync action."
		printMsg "Please use standard crontab syntax, see man crontab for additional info."
		printMsg "Enter minute of execution:"
		read MyMinute
		printMsg "Enter hour of execution:"
		read MyHour
		printMsg "Enter day of the month of execution:"
		read MyDayOfMonth
		printMsg "Enter month of execution:"
		read MyMonth
		printMsg "Enter day of the week of execution:"
		read MyDayOfWeek
		printMsg "Enter directory to be checked:"
		read MyDirectory
		printMsg "Enter full filename of the journal file:"
		read MyJournal
		schedDate=$(date)
		printMsg "I will add the following lines to $USER crontab file"
		printMsg "# Scheduled by cthulhu on $schedDate"
		printMsg "$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) check-status $MyDirectory $MyJournal > /dev/null"
		(crontab -l 2>/dev/null; echo -e "# Scheduled by cthulhu on $schedDate\n$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) check-status $MyDirectory $MyJournal > /dev/null") | crontab -
		exit 0
	fi
	if [[ $actionToSchedule == 2 ]]; then
		printMsg "Gathering data to schedule your sync action."
		printMsg "Please use standard crontab syntax, see man crontab for additional info."
		printMsg "Enter minute of execution:"
		read MyMinute
		printMsg "Enter hour of execution:"
		read MyHour
		printMsg "Enter day of the month of execution:"
		read MyDayOfMonth
		printMsg "Enter month of execution:"
		read MyMonth
		printMsg "Enter day of the week of execution:"
		read MyDayOfWeek
		schedDate=$(date)
		printMsg "I will add the following lines to $USER crontab file"
		printMsg "# Scheduled by cthulhu on $schedDate"
		printMsg "$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) check-sync > /dev/null"
		(crontab -l 2>/dev/null; echo -e "# Scheduled by cthulhu on $schedDate\n$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) check-sync > /dev/null") | crontab -
		exit 0
	fi
	if [[ $actionToSchedule == 3 ]]; then
		printMsg "Gathering data to schedule your sync action."
		printMsg "Please use standard crontab syntax, see man crontab for additional info."
		printMsg "Enter minute of execution:"
		read MyMinute
		printMsg "Enter hour of execution:"
		read MyHour
		printMsg "Enter day of the month of execution:"
		read MyDayOfMonth
		printMsg "Enter month of execution:"
		read MyMonth
		printMsg "Enter day of the week of execution:"
		read MyDayOfWeek
		printMsg "Enter directory to be sync'd:"
		read MyDirectory
		printMsg "Enter target vault:"
		read MyVault
		printMsg "Enter full filename of the journal file:"
		read MyJournal
		schedDate=$(date)
		printMsg "I will add the following lines to $USER crontab file"
		printMsg "# Scheduled by cthulhu on $schedDate"
		printMsg "$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) sync $MyDirectory $MyVault $MyJournal > /dev/null"
		(crontab -l 2>/dev/null; echo -e "# Scheduled by cthulhu on $schedDate\n$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) sync $MyDirectory $MyVault $MyJournal > /dev/null") | crontab -
		exit 0
	fi
	# Catch-all
	printMsg "Invalid option number $actionToSchedule. Aborting."
	exit 12
fi

# Show scheduled actions
if [[ $1 == 'show-schedule' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	if [[ $(crontab -l | grep cthulhu | wc -l) == 0 ]]; then
		printMsg "No cthulhu actions are currently scheduled on this sytem."
	else
		printMsg "The following actions are currently scheduled in crontab:"
		crontab -l | grep -B1 cthulhu | grep cthulhu
	fi
	exit 0
fi

# Delete scheduled actions
if [[ $1 == 'del-schedule' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	myLineNumber=1
	tmpCronOut=/tmp/cthulhu.cronout
	tmpCronOutNumbered=/tmp/cthulhu.numbered
	# Cleaning old leftovers, if any
	rm -rf $tmpCronOut $tmpCronOutNumbered >/dev/null 2>&1
	# cthulhu manages three scheduled actions: sync, check-status and check-sync
	printMsg "The following actions are currently scheduled in crontab:"
	crontab -l | grep cthulhu | egrep "sync|check-status|check-sync" > $tmpCronOut
	while IFS= read -r thisLine; do
	  echo "$myLineNumber. $thisLine" >> $tmpCronOutNumbered
	  myLineNumber=$(($myLineNumber+1)) 
	done < "$tmpCronOut"
	cat $tmpCronOutNumbered
	printMsg "Please, select the scheduled action to be remoevd:"
	read myLineNumberToRemove
	myLineToRemove=$(cat $tmpCronOutNumbered | grep "^${myLineNumberToRemove}. " | cut -d " " -f 2-)
	printMsg "The following action(s) will be removed:"
	myCommentToRemove=$(crontab -l 2>/dev/null | egrep -B1 "^$(echo $myLineToRemove | cut -d " " -f 1,2)" | head -1)
	printMsg "$myCommentToRemove"
	printMsg "$myLineToRemove"
	printMsg "Enter to confirm or Ctrl+c to abort"
	read
	crontab -l 2>/dev/null | egrep -v "$myCommentToRemove" | crontab -
	crontab -l 2>/dev/null | egrep -v "^$(echo $myLineToRemove | cut -d " " -f 1,2)" | crontab - 
	# Cleaning temporary files
	rm -rf $tmpCronOut $tmpCronOutNumbered >/dev/null 2>&1
	exit 0
fi

if [[ $1 == 'list-codes' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "The folloing exit codes are used by cthulhu:"
	printMsg "   0 - Sucessful execution."
	printMsg "   1 - Mandatory parameter(s) missing. Execution aborted."
	printMsg "   2 - Missing sync action parameter(s). Execution aborted."
	printMsg "   3 - Missing restore-prepare action parameter(s). Execution aborted."
	printMsg "   4 - Missing create-vault action parameter(s). Execution aborted."
	printMsg "   5 - Missing check-status action parameter(s). Execution aborted."
	printMsg "   6 - Missing purge-vault action parameter(s). Execution aborted."
	printMsg "   7 - Missing target directory. Execution aborted."
	printMsg "   8 - diff tool not installed on the system. Execution aborted."
	printMsg "   9 - Missing App:MtAws configuration file. Execution aborted."
	printMsg "  10 - Missing log directory. Execution aborted."
	printMsg "  11 - Missing restore-complete action parameter(s). Execution aborted."
	printMsg "  12 - Invalid action selected during add-schedule. Execution aborted."
	printMsg "  13 - Missing configuration file detected when executing show-conf action."
	printMsg "  14 - Missing journal-create action parameter(s). Execution aborted."
	printMsg "  15 - Missing journal-download action parameter(s). Execution aborted."
	printMsg "  16 - Conflicting running actions detected. Execution aborted."
	printMsg "  17 - Error encountered during execution of check-status action. Execution aborted."
	printMsg " 666 - Unexpected exit code. It should never be reported. If you encounter it, open a bug on cthulhu GitHub project."
	exit 0
fi

if [[ $1 == 'restore-prepare' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# Must be invoked with 4 args: action, directory, vault, journal
	if [[ $# != 4 ]]; then
		doHelpRestorePrepare
		exit 3
	fi
	printMsg "Starting $1 action on vault $3."
	printMsg "I will restore up to $maxRestoreFiles files from $3 vault. Do you want to override this limit? (y/n)"
	read overrideMaxFiles
	if [[ $overrideMaxFiles == 'y' ]]; then
		printMsg "What limit shall I use?"
		read maxRestoreFiles
	fi
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	$myMtGlacier restore --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --max-number-of-files $maxRestoreFiles
	if [[ $? == 0 ]]; then
		printMsg "Restoration process was started. To complete the restoration, execute cthulhu restore-download $2 $3 $4 after $(date -d "now + $restoreDelay hours")"
		printMsg "Do you want me to send an email reminder to $emailTo when files are supposed to be available for downloading? (y/n)"
		read sendReminder
		if [[ $sendReminder == 'y' ]]; then
			# Using at to schedule the email generation
			which at >/dev/null 2>&1
			if [[ $? == 1 ]]; then
				printMsg "ERROR: at daemon is not available on the system. I cannot schedule the reminder."
				exit 0
			fi
			# mailMessage="echo -e "Hello,\nPlease execute cthulhu restore-download $2 $3 $4\n\nYours faithfully\n-- \nChthulu@$(hostname)" | mail -s "[cthulhu] - Data availale for retrieval" $emailTo"
			# echo "$mailMessage" | at now + $restoreDelay hours
			reminderScript=/tmp/cthulhurReminder-$1-$(date +%s).sh
			touch $reminderScript
			chmod +x $reminderScript
			echo "#!/bin/bash" > $reminderScript
			echo "echo -e \"Hello,\nPlease execute cthulhu restore-download $2 $3 $4\n\nYours faithfully\n-- \nChthulu@$(hostname)\" | mail -s \"[cthulhu] - Data available for retrieval\" $emailTo" >> $reminderScript
			echo "rm -rf $reminderScript" >> $reminderScript
			echo "exit 0" >> $reminderScript
			echo "" >> $reminderScript
			echo $reminderScript | at now + $restoreDelay hours
		fi
	fi
	printMsg "Completed."
	exit 0
fi

if [[ $1 == 'restore-download' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# Must be invoked with 4 args: action, directory, vault, journal
	if [[ $# != 4 ]]; then
		doHelpRestoreDownload
		exit 11
	fi
	printMsg "Starting $1 action on vault $3."
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	$myMtGlacier restore-completed --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue
	printMsg "Completed."
	exit 0
fi

if [[ $1 == 'show-conf' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	if [[ -f $myConfigFile ]]; then
		printMsg "This is the configuration currently used by cthulhu:"
		cat $myConfigFile
		exit 0
	else
		printMsg "ERROR: I cannot find $myConfigFile. Aborting."
		printMsg "You can regenerate the default configuration file with the command:"
		printMsg "  cthulhu gen-conf"
		exit 13	
	fi
fi

if [[ $1 == 'journal-create' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# Must be invoked with 2 args: action, vault
	if [[ $# != 2 ]]; then
		doHelpJournalCreate
		exit 14
	fi
	printMsg "Starting action $1 on vault $2."
	$myMtGlacier retrieve-inventory --config $configFile --vault $2
	if [[ $? == 0 ]]; then
		printMsg "Journal creation process was started. To complete the process, execute cthulhu journal-download $2 [journal] after $(date -d "now + $restoreDelay hours")"
		printMsg "Do you want me to send an email reminder to $emailTo when journal is supposed to be available for downloading? (y/n)"
		read sendReminder
		if [[ $sendReminder == 'y' ]]; then
			# Using at to schedule the email generation
			which at >/dev/null 2>&1
			if [[ $? == 1 ]]; then
				printMsg "ERROR: at daemon is not available on the system. I cannot schedule the reminder."
				exit 0
			fi
			reminderScript=/tmp/cthulhuJournalReminder-$1-$(date +%s).sh
			touch $reminderScript
			chmod +x $reminderScript
			echo "#!/bin/bash" > $reminderScript
			echo "echo -e \"Hello,\nPlease execute cthulhu journal-download $2 [journal], where [journal] is the filename of the file where you want to save the journal to.\n\nYours faithfully\n-- \nChthulu@$(hostname)\" | mail -s \"[cthulhu] - Journal available for download\" $emailTo" >> $reminderScript
			echo "rm -rf $reminderScript" >> $reminderScript
			echo "exit 0" >> $reminderScript
			echo "" >> $reminderScript
			echo $reminderScript | at now + $restoreDelay hours
		fi
	fi
	printMsg "Completed."
	exit 0
fi

if [[ $1 == 'journal-download' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# Must be invoked with 3 args: action, vault, journal
	if [[ $# != 3 ]]; then
		doHelpJournalDownload
		exit 15
	fi
	printMsg "Starting action $1 on vault $2."
	$myMtGlacier download-inventory --config $configFile --vault $2 --new-journal $3
	printMsg "Completed."
	exit 0
fi

if [[ $1 == 'show-default-config' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# We override myConfigFile to use a temp file
	myConfigFile=/tmp/cthulhu.conf.tmp
	# We create the temp config file
	writeConfigFile
	# We display the temp file to STDOUT
	cat $myConfigFile
	# We delete the temp file
	rm -rf $myConfigFile >/dev/null 2>&1
	exit 0
fi

if [[ $1 == 'show-changelog' ]]; then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# The action does not require any argument, so we ignore CLIARG
	# Setting required variables
	changelogURL="https://raw.githubusercontent.com/PaoloRipa/cthulhu/master/changelog"
	changelogFile=/tmp/changelog.tmp
	# Cleaning up leftovers, if any
	rm -rf $changelogFile >/dev/null 2>&1
	# Trying to use curl
	curl -o $changelogFile $changelogURL 2>/dev/null
	if [[ $? == 0 ]]; then
		more $changelogFile
		rm -rf $changelogFile >/dev/null 2>&1
		exit 0
	fi
	# Fallback on wget
	wget $changelogURL -O $changelogFile 2>/dev/null
	if [[ $? == 0 ]]; then
		more $changelogFile
		rm -rf $changelogFile >/dev/null 2>&1
		exit 0	
	fi
	# Both failed, displaying a warning message
	printMsg "Warning, changelog contents could not be retreived."
	printMsg "Changelog is available at the following URL: $changelogURL"
	# No special failure code for this action
	exit 0
fi

if [[ $1 == 'manage-log' ]]; then
	# Stub for log management actions. For now only the crontab actions have been ported here.
	# More to come.
	printMsg "Purging log directory $logDir."
	find $logDir/ -name "glacier-*.log" -ctime +$logRetentionDays -type f  -exec rm -rf {} \;
	find $logDir/ -name "glacier-*.log.gz" -ctime +$logRetentionDays -type f  -exec rm -rf {} \;
	printMsg "Purging persisted log files under $logDir."
	find $logDir/ -name "glacier-*.persist.gz" -ctime +$persistLogRetentionDays -type f -exec rm -rf {} \;
	exit 0
fi

if [[ $1 == 'purge-lock' ]]; then
	forceInteractiveMode
	printMsg "Deleting lock file: $myLockFile"
	rm -rf $myLockFile
	printMsg "Done."
	exit 0
fi

# Internal action, used for autocompletion only
if [[ $1 == 'short-help' ]]; then
	shortHelp
	exit 0
fi

# Catch calls for help
if [[ $1 == 'help' ]]; then
	doHelp
	exit 0
fi
if [[ $1 == 'help-action' ]]; then
	doHelpAction $2
	exit 0
fi

# Catch all!
# This cannot be run in batch mode, so we always print only to STDOUT
forceInteractiveMode
printMsg "We should never get here!"
doHelp
exit 666
