#!/bin/bash

######################################################
# Ph'nglui mglw'nafh Cthulhu R'lyeh wgah'nagl fhtagn #
######################################################
###
# Cthulhu is a front-end tool for mtglacier CLI
# Paolo Ripamonti - paolo.ripamonti@gmail.com - 2017
#
# Reference to mtglacier --> https://github.com/vsespb/mt-aws-glacier
#
# Version 1.6 - Thu Feb 15 11:05:48 CET 2018
#             Added function to list scheduled sync actions
#             Forced interactive mode now disables sending emails
#             Fixed check-sync function to send email only if enabled by config
#             Added support for CLI flags
#             Added CLI flag to force interactive mode
#             Added batch/interactive usage configs to help file and to main configuration file
#             checkDirectory action logic has been made filesystem agnostic
#             checkDirectory action now sends email alerts for scheduled batch actions
#             Fixed error message in checkDirectory action
#             checkDirectory action can now log action being aborted
#             Revised and expanded online help
#             Added CLI flag to show help (for compatibility)
#             Improved email generation, now supporting plain text basic formatting (newlines, tabs...)
#             Added fix for issue #1
#             Added fix for issue #15
#
# Version 1.5 - Mon Feb 12 15:48:25 CET 2018 
#             Minor "cosmetic" fixes from previous versions
#             Added function to upgrade the configuration file 
#             Enhanced install gen-conf to add mtglacier directory to PATH 
#             Added version number that is displayed by main help function
#             Fixed a formatting bug in printMsg function, causing special chars to be interpreted
#             Added a function to schedule sync actions via crontab 
#
# Version 1.4 - Thu Nov  9 10:53:34 CET 2017
#             Added support to send out emails
#             Added success check at the end of sync action 
#             Added checks against required dirs and files
#             Added function to check last execution of sync action
#             Added configuration variable to disable check at the end of sync action
#             Added function to generate a test email
#
# Version 1.3_1 - Wed Nov  8 08:08:58 CET 2017
#             Added a clarification on how writeToMainLog and useSystemLog do interact
#
# Version 1.3 - Mon Oct 30 15:09:31 CET 2017
#             Added support for configuration file 
#             Added action to remove all items from a vault (purge) 
#             Added action to delete a purged vault 
#             Added install action, to be execute as first run 
#             Added support for syslog 
#
# Version 1.2 - Tue Sep 12 08:33:49 CEST 2017
#             Added check if the target directory exists
#             Fixed exit code in check-status to be unique
#
# Version 1.1 - Mon Sep  4 11:14:54 CEST 2017
#             Changed sync action log to record the target vault
#             Changed check actions log to record the target directory (as no vault is passed to the command)
#
# Version 1.0 - Fri Sep  1 14:22:02 CEST 2017
#             First GA version
###

# VERSION - DO NOT CHANGE
cthulhuVersion="1.6"

# Setting defaults
configFile=$HOME/glacier.d/mtAwsGlacier.conf  # AWS Glacier config file
concurrencyValue=10                           # Number of concurrent backup threads
leafOptValue=0                                # Set to 0 when working with CIFS
logActionsToFile=1                            # Set to 1 to record results of actions to action log file
quietMode=1                                   # Set to 1 not to print anything to STDOUT
deleteRemoved=0                               # Set to 1 to instruct sync action to delete removed items
logDir=$HOME/logs                             # Location of the log directory
mainLog=${logDir}/glacierBackup.log           # Main log file
writeToMainLog=1                              # Write actions and timestamps to a log
useSystemLog=1                                # Set to 1 to log actions and timestamps via syslog instead of the main log file
sendEmails=0                                  # Set to 1 to trigger email notifications
emailTo=root                                  # Should be overridden in the config file
checkOnSyncEnd=0                              # Set to 1 to force an exit check upon completion of sync action

# Sourcing the cthulhu configuration file, to override defaults
myConfigFile="$HOME/.cthulhu"
[ -f $myConfigFile ] && source $myConfigFile

# Helper Functions
function doHelp() {
	forceInteractiveMode
	printMsg "cthulhu version $cthulhuVersion"
	printMsg "Usage: cthulhu -i [action] [vault] [journal]"
	printMsg "Flags:"
	printMsg "  -h               Show online help"
	printMsg "  -i               Force interactive mode"
	printMsg " "
	printMsg "Valid actions are:"
	printMsg "  sync             Excutes a sync from the local directory to the vault"
	printMsg "  list-vaults      Lists the existing vaults"
	printMsg "  create-vault     Creates a new vault"
	printMsg "  check-status     Generates a stats file, describing the status of the backup"
	printMsg "  gen-conf         Generates the default configuration file: $myConfigFile"
	printMsg "  install          First time installation"
	printMsg "  purge-vault      Remove all items from the target vault"
	printMsg "  delete-vault     Deletes the target vault (must have been purged)"
	printMsg "  check-sync       Executes a status check of the last sync action log files"
	printMsg "  test-mail        Sends out a test email"
	printMsg "  upgrade-conf     Upgrades the configuration file: $myConfigFile"
	printMsg "  schedule-sync    Adds a crontab entry to schedule a sync action on a targe vault"
	printMsg "  show-schedule    Lists sync actions scheduled via crontab"
	printMsg " "
	printMsg " "
	printMsg "How to configure cthulhu for batch or interactive mode"
	printMsg "------------------------------------------------------"
	printMsg "Set the following variables to always adopt batch usage behavior (e.g. via crontab only)"
	printMsg "  logActionsToFile=1"
	printMsg "  quietMode=1"
	printMsg "  writeToMainLog=1"
	printMsg " "
	printMsg "Set the following variable to always adopt interactive usage (e.g. for shell calls only)"
	printMsg "  logActionsToFile=0"
	printMsg "  quietMode=0"
	printMsg "  writeToMainLog=0"
	printMsg " "
	printMsg " "
	printMsg "Usage tips and tricks"
	printMsg "---------------------"
	printMsg "1. If this is the first time you run cthulhu, then you should execute the install action."
	printMsg "2. Cthulhu configuration file is $myConfigFile and can be generated by the gen-conf action."
	printMsg "3. Cthulhu is a front-end to App::MtAws perl module. In order to use cthulhu, you must install App::MtAws."
	printMsg "4. Further information on App:MtAws can be found at https://github.com/vsespb/mt-aws-glacier"
	printMsg "5. You can contact the maintainer of https://github.com/PaoloRipa/cthulhu for any information."
}

function doHelpSync() {
	forceInteractiveMode
	printMsg "Usage: cthulhu sync [dir] [vault] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
}

function doHelpCheck() {
	forceInteractiveMode
	printMsg "Usage cthulhu check-status [dir] [journal]"
	printMsg "  [dir]     Source backup directory, with full path"
	printMsg "  [journal] Journal file, with full path"
	printMsg ""
	printMsg "Note: executing this action might take long, depending on the size of the vault"
}

function doHelpCreate() {
	forceInteractiveMode
	printMsg "Usage cthulhu create-vault [vault]"
	printMsg "  [vault]   Target Glacier Vault"
}

function doHelpPurge() {
	forceInteractiveMode
	printMsg "Usage cthulhu purge-vault [vault] [journal]"
	printMsg "  [vault]   Target Glacier Vault"
	printMsg "  [journal] Journal file, with full path"
}

function doHelpDelete() {
	forceInteractiveMode
	printMsg "Usage cthulhu delete-vault [vault]"
	printMsg "  [vault]   Target Glacier Vault"
}

function forceInteractiveMode() {
	quietMode=0
	writeToMainLog=0
	useSystemLog=0
	sendEmails=0
}

function printMsg() {
	timestamp=`date`
	# Do I need to write to STDOUT?
	[ $quietMode == 0 ] && echo "$1"
	
	# Do I need to write to a log?
	if [ $writeToMainLog == 1 ] 
	then
		# Do I need to use logger?
		if [ $useSystemLog == 1 ]
		then
			logger -p user.notice -t cthulhu $1
		else	
			echo "[$timestamp] - [cthulhu] - $1" >> $mainLog
		fi
	fi
}

function parseCheckLocalHash() {
	grepString="^TOTALS|^[0-9]"
	echo "Backup stats for directory: $3"
	cat $1 | egrep "$grepString" | grep -v ^$ >> $2 
}

# Function used to check if the target directory exists
# Since 1.6, this can be called with 2 params
#   1. Target directory to be checked
#   2. Action that called the function, for reporting purposes
function checkDirectory() {
	if [ ! -d $1 ]
	then
		if [[ $2 ]]; then
			printMsg "ERROR: Target directory $1 does not exist. Aborting action $2."
		else
			printMsg "ERROR: Target directory $1 does not exist. Aborting action."
		fi
		if [ $sendEmails == 1 ]
		then
			if [[ $2 ]]; then
				doSendEmail "ERROR: Non existing directory" "ERROR: Target directory $1 does not exist on host $(hostname).\nAborting action $2.\n"
			else
				doSendEmail "ERROR: Non existing directory" "Target directory $1 does not exist on host $(hostname).\nAborting action.\n"
			fi
		fi
		exit 7
	fi
}

# Function used to send emails to recipients
# Note that this function requires special chars, as it's using 
# echo with interpretation of backslash escapes enabled.
function doSendEmail() {
	emailSignature="\nYours faithfully\n-- \nChthulu@$(hostname)"
	# Requires two args: subject and body
	echo -e "$2 $emailSignature" | mail -s "[cthulhu] - $1" $emailTo
}

# Function to create a new config file, with default values
function writeConfigFile() {
	rm -rf $myConfigFile
	echo "######################################" >> $myConfigFile
	echo "# cthulhu default configuration file #" >> $myConfigFile
	echo "######################################" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# How to configure cthulhu for batch or interactive mode" >> $myConfigFile
	echo "# ------------------------------------------------------" >> $myConfigFile
	echo "# Set the following variables to always adopt batch usage behavior (e.g. via crontab only)" >> $myConfigFile
	echo "#   logActionsToFile=1" >> $myConfigFile
	echo "#   quietMode=1" >> $myConfigFile
	echo "#   writeToMainLog=1" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# Set the following variable to always adopt interactive usage (e.g. for shell calls only)" >> $myConfigFile
	echo "#   logActionsToFile=0" >> $myConfigFile
	echo "#   quietMode=0" >> $myConfigFile
	echo "#   writeToMainLog=0" >> $myConfigFile
	echo "# " >> $myConfigFile
	echo "# Location of AWS Glacier configuration file" >> $myConfigFile
	echo "configFile=/home/oper/glacier.d/mtAwsGlacier.conf" >> $myConfigFile
	echo "# Number of concurrent backup threads" >> $myConfigFile
	echo "concurrencyValue=10" >> $myConfigFile
	echo "# Set to 0 when working with CIFS" >> $myConfigFile
	echo "leafOptValue=0" >> $myConfigFile
	echo "# Set to 1 to record results of actions to the action log file"  >> $myConfigFile
	echo "logActionsToFile=1" >> $myConfigFile
	echo "# Set to 1 not to print anything to STDOUT"  >> $myConfigFile
	echo "quietMode=1" >> $myConfigFile
	echo "# Set to 1 to instruct sync action to delete removed items"  >> $myConfigFile
	echo "deleteRemoved=0" >> $myConfigFile
	echo "# Location of the log directory" >> $myConfigFile
	echo "logDir=$HOME/logs" >> $myConfigFile
	echo "# Main log file" >> $myConfigFile
	echo "mainLog=${logDir}/glacierBackup.log" >> $myConfigFile
	echo "# Set to 1 to write actions and timestamps to the main log file" >> $myConfigFile
	echo "writeToMainLog=1" >> $myConfigFile
	echo "# Set to 1 to log events via syslog" >> $myConfigFile
	echo "useSystemLog=0" >> $myConfigFile
	echo "# Set to 1 to trigger email notifications" >> $myConfigFile
	echo "sendEmails=0" >> $myConfigFile
	echo "# Email address that should get the notifications" >> $myConfigFile
	echo "emailTo=root" >> $myConfigFile
	echo "# Set to 1 to force an exit check upon completion of sync action" >> $myConfigFile
	echo "checkOnSyncEnd=0" >> $myConfigFile
	myPathDir=$(which mtglacier | sed -e "s/mtglacier//")
	echo "# Ensuring mtglacier is in the path when running via cron" >> $myConfigFile
	echo "PATH=\$PATH:$myPathDir" >> $myConfigFile
}

########
# MAIN #
########

# Reading CLI flags
while getopts "hi" opt; do
  case $opt in
   h ) doHelp && exit 0 ;;
   i ) forceInteractiveMode ;;
   * ) ;;
  esac
done
shift $((OPTIND - 1))

# If we have no arguments, then print usage
if [ $# == 0 ]
then
	doHelp
	exit 1
fi

# Check if the backend is installed
which mtglacier >/dev/null
if [ $? != 0 ]
then
	printMsg "ERROR: mtglacier does not seem to be installed on the system. Aborting."
	exit 8
else
	myMtGlacier=$(which mtglacier)
fi

# Check if all directories and files required are available
[ ! -f $configFile ] && printMsg "ERROR: $configFile is missing. Aborting." && exit 9
[ ! -d $logDir ] && printMsg "ERROR: $logDir is missing. Aborting." && exit 10

# Sync action, to execute backup fo source dir to target vault
if [ $1 == 'sync' ]
then
	# Must be invoked with 4 args: action, directory, vault, journal
	if [ $# != 4 ] 
	then
		doHelpSync
		exit 2
	fi
	printMsg "Starting $1 action on vault $3."
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	if [ $logActionsToFile == 1 ]
	then
		logFile=${logDir}/glacier-$1-$3-`date +%s`.log
		if [ $deleteRemoved == 1 ]
		then
			$myMtGlacier $1 --delete-removed --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		else
			$myMtGlacier $1 --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue >$logFile 2>&1
		fi
		printMsg "Completed. Action log: $logFile"
	else
		if [ $deleteRemoved == 1 ]
		then
			$myMtGlacier $1 --delete-removed --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
		else
			$myMtGlacier $1 --config $configFile --dir $2 --vault $3 --journal $4 --concurrency $concurrencyValue --leaf-optimization $leafOptValue
		fi
	fi

	# We confirm if this was a good run, or log an error
	if [ $checkOnSyncEnd == 1 ]
	then
		if [ $(tail -1 $logFile | grep "OK DONE" | wc -l) == 0 ]
		then
			printMsg "ERROR: Action $1 on vault $3 did not complete with OK DONE. Check $logFile for details."
			if [ $sendEmails == 1 ]
			then
				doSendEmail "ERROR: Action $1 on vault $3" "Action $1 on vault $3 on host $(hostname) did not complete with OK DONE.\nPlease, check $logFile for details.\n"
			fi
		fi
	fi
	exit 0
fi

# List action, to retrieve a list of available vaults.
if [ $1 == 'list-vaults' ]
then
	# This cannot be run in batch mode, so we always print only to STDOUT
	forceInteractiveMode
	$myMtGlacier $1 --config $configFile
	exit 0
fi

# Create action to provision a new vault
if [ $1 == 'create-vault' ]
then
	# This cannot be run in batch mode, so we always print only to STDOUT
	forceInteractiveMode
	# Must be run with 2 args: action, vault
	if [ $# != 2 ]
	then
		doHelpCreate
		exit 4
	fi
	$myMtGlacier $1 $2 --config $configFile
	exit 0
fi

# Check status action, to generate a stats file showing the overall status of an archive
if [ $1 == 'check-status' ]
then
	# Must be run with 3 args: action, directory, journal
	if [ $# != 3 ]
	then
		doHelpCheck
		exit 5
	fi
	printMsg "Starting $1 action on directory $2."
	# Checking if the target directory is a valid one
	checkDirectory $2 $1
	logFile=${logDir}/glacier-$1-`date +%s`.log
	$myMtGlacier check-local-hash --config $configFile --dir $2 --journal $3 >$logFile 2>&1
	resultFile=${logDir}/glacier-stats-`date +%s`.log
	parseCheckLocalHash $logFile $resultFile $2
	printMsg "Action completed. Stats logged to $resultFile"
	rm -rf $logFile
	exit 0
fi

if [ $1 == 'purge-vault' ]
then
	# Must be run with 3 args: action, vault, journal
	if [ $# != 3 ]
	then
		doHelpPurge
		exit 6
	fi
	if [ $logActionsToFile == 1 ]
	then
		logFile=${logDir}/glacier-$1-`date +%s`.log
		printMsg "Starting $1 action on vault $2."
		$myMtGlacier $1 --vault $2 --config $configFile --journal $3 >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier $1 --vault $2 --config $configFile --journal $3
	fi
	exit 0
fi

if [ $1 == 'delete-vault' ]
then
	# Must be run with 2 args: action, vault
	if [ $# != 2 ]
	then
		doHelpDelete
		exit 7
	fi
	if [ $logActionsToFile == 1 ]
	then
		logFile=${logDir}/glacier-$1-`date +%s`.log
		printMsg "Starting $1 action on vault $2."
		$myMtGlacier $1 $2 --config $configFile >$logFile 2>&1
		printMsg "Completed. Action log: $logFile"
	else
		$myMtGlacier $1 $2 --config $configFile 
	fi
	exit 0
fi

# Check exit status of last sync action on each vault
if [ $1 == 'check-sync' ]
then
	cd $logDir
	for i in `ls glacier-sync-* | cut -d "-" -f 3 | sort -d | uniq`
	do 
		if [ $(tail -1 `ls -c1 -rt glacier-sync-$i-* | tail -1` | grep -v "OK DONE" | wc -l) != 0 ]
		then
			if [ $sendEmails == 1 ]
			then
				doSendEmail "WARNING: Failure in sync log for vault $i" "Last line of last sync file for vault $i is not OK DONE.\nVerify the file contents.\n"
			fi
			printMsg "Last line of last sync file for vault $i is not OK DONE. Verify the file contents."
		else
			printMsg "Check-sync action completed on vault $i. No issues found."
		fi
	done
	exit 0
fi

# Generate configuration file action
if [ $1 == 'gen-conf' ]
then
	forceInteractiveMode
	printMsg "Generating default configuration file: $myConfigFile"
	writeConfigFile
	exit 0
fi

# First time run
if [ $1 == 'install' ]
then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "Executing first time run setup."
	mkdir $logDir
	writeConfigFile
	mkdir $HOME/glacier.d
	echo "Building the AWS Glacier configuration file"
	echo "Please provide the following details:"
	echo "- Key: "
	read installKey
	echo "- Secret: "
	read installSecret
	echo "- Region: "
	read installRegion
	echo "Generating AWS Glacier file"
	echo "key=$installKey" > $configFile
	echo "secret=$installSecret" >> $configFile
	echo "region=$installRegion" >> $configFile
	echo "protocol=http" >> $configFile
	printMsg "Done, cthulhu is ready to be used."
	exit 0
fi

# Test email 
if [ $1 == 'test-mail' ]
then
	printMsg "Generating test email."
	doSendEmail "INFO: Test email from cthulhu" "This is a test message from cthulhu running on $(hostname).\nPlease do not respond.\n"
	exit 0
fi

# Upgrade configuration file
if [ $1 == 'upgrade-conf' ]
then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	# Checking if diff and patch are present on the system
	isPatchAvailable='yes'
	which diff >/dev/null
	[ $? != 0 ] && printMsg "ERROR: diff does not seem to be present on the system. Aborting." && exit 8
	which patch >/dev/null
	if [ $? != 0 ]
	then
		isPatchAvailable='no'
		printMsg "WARNING: patch does not seem to be present on the system."
		printMsg "Configuration differences won't be applicable."
		printMsg "Hit RETURN to continue or Ctrl+C to abort"
		read
	fi
	# Overriding config file to create the new one
	myConfigFile="$HOME/.cthulhu.new"
	# Creating the new file 
	writeConfigFile
	# Resetting the config file
	myConfigFile="$HOME/.cthulhu"
	myNewConfigFile="$HOME/.cthulhu.new"
	myPatchFile="$HOME/.cthulhu.patch"
	myConfigBackup="$HOME/.cthulhu.$(date +%s)"
	if [ $(diff -u $myConfigFile $myNewConfigFile | wc -l) == 0 ]
	then
		printMsg "New and old configuration file are the same. Nothing else to do."
		rm -rf $myNewConfigFile
	else
		myAnswer=n
		printMsg "The following differences, between old and new configuration files have been detected:"
		diff -u $myConfigFile $myNewConfigFile 
		if [ $isPatchAvailable == 'yes']
		then
			printMsg "Do you want me to apply the differences? (y/n)"
			read myAnswer
			if [ $myAnswer == 'y' ]
			then
				printMsg "Generating patch file"
				diff -u $myConfigFile $myNewConfigFile > $myPatchFile
				printMsg "Creating configuration backup --> $myConfigBackup"
				cp -p $myConfigFile $myConfigBackup
				printMsg "Applying patch"
				patch < $myPatchFile
				printMsg "Done."
			else
				printMsg "The old configuration has been preserved."
			fi
		else
			printMsg "To apply changes, please, install patch utility and start over."
		fi
	fi
	# Finally cleaning up
	rm -rf $myNewConfigFile $myPatchFile >/dev/null 2>&1
	exit 0
fi

# Schedule sync actions via crond
if [ $1 == 'schedule-sync' ]
then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "Gathering data to schedule your sync action."
	printMsg "Please use standard crontab syntax"
	printMsg "Enter minute of execution:"
	read MyMinute
	printMsg "Enter hour of execution:"
	read MyHour
	printMsg "Enter day of the month of execution:"
	read MyDayOfMonth
	printMsg "Enter month of execution:"
	read MyMonth
	printMsg "Enter day of the week of execution:"
	read MyDayOfWeek
	printMsg "Enter directory to be sync'd:"
	read MyDirectory
	printMsg "Enter target vault:"
	read MyVault
	printMsg "Enter full filename of the journal file:"
	read MyJournal
	schedDate=$(date)
	printMsg "I will add the following lines to $USER crontab file"
	printMsg "# Scheduled by cthulhu on $schedDate"
	printMsg "$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) sync $MyDirectory $MyVault $MyJournal > /dev/null"
	(crontab -l 2>/dev/null; echo -e "# Scheduled by cthulhu on $schedDate\n$MyMinute $MyHour $MyDayOfMonth $MyMonth $MyDayOfWeek $(which cthulhu) sync $MyDirectory $MyVault $MyJournal > /dev/null") | crontab -
	exit 0
fi

if [ $1 == 'show-schedule' ]
then
	# This is designed to run only in interactive mode, so we print only to STDOUT
	forceInteractiveMode
	printMsg "The following sync actions are currently scheduled in crontab:"
	crontab -l | grep cthulhu | grep sync	
	exit 0
fi

# Catch all!
# This cannot be run in batch mode, so we always print only to STDOUT
forceInteractiveMode
printMsg "We should never get here!"
doHelp
exit 666
